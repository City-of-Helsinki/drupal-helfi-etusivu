<?php

/**
 * @file
 * Contains necessary alterations for the Helfi etusivu instance.
 */

declare(strict_types=1);

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\helfi_platform_config\DTO\ParagraphTypeCollection;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\Plugin\views\query\Sql;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Alter promoted to front page label value and position in news content forms.
 *
 * This module alter hook is too early to fully handle the
 * "promote" field alterations, as the entity add/edit form sidebar variables
 * are altered by Gin theme and HDBT Admin theme.
 * See: hdbt_admin/hdbt_admin.theme / hdbt_admin_apply_form_theme().
 */
function helfi_etusivu_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) : void {
  if (
    !isset($form['promote']) ||
    !str_contains($form_id, 'news_item') &&
    !str_contains($form_id, 'news_article')
  ) {
    return;
  }

  // Pass "should_move" variable to form element and update the widget title.
  $form['promote']['#should_move'] = TRUE;
  $form['promote']['widget']['value']['#title'] = t('Publish the news item in the top news flow', [], ['context' => 'News item promoted field title']);
  $form['promote']['widget']['#title'] = t('Top news flow', [], ['context' => 'News item promoted field wrapper title']);
  $form['promote']['widget']['#title_display'] = 'above';

  // Alter the translations for the news articles.
  if (str_contains($form_id, 'news_article')) {
    $form['promote']['widget']['value']['#title'] = t('Publish the news article in the top news articles flow', [], ['context' => 'News article promoted field title']);
    $form['promote']['widget']['#title'] = t('Top news article flow', [], ['context' => 'News article promoted field wrapper title']);
  }
}

/**
 * Implements hook_views_query_alter().
 */
function helfi_etusivu_views_query_alter(ViewExecutable $view, QueryPluginBase $query) : void {
  $draggable_views = [
    'frontpage_news',
    'ordered_news_articles',
    'ordered_news_list',
  ];
  if (in_array($view->id(), $draggable_views)) {
    assert($query instanceof Sql);

    $table = $query->getTableInfo('draggableviews_structure');
    if (isset($table['join']->extra)) {
      $langcode = \Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId();
      $table['join']->extra = !$table['join']->extra ? [] : $table['join']->extra;
      $table['join']->extra[] = [
        'field' => 'langcode',
        'value' => $langcode,
        'operator' => '=',
      ];
    }
  }
}

/**
 * Implements hook_cron().
 */
function helfi_etusivu_cron() : void {
  // Get promoted news_item nodes that are more than one month old.
  $result = \Drupal::entityQuery('node')
    ->condition('type', ['news_item', 'news_article'], 'IN')
    ->condition('promote', 1)
    ->condition('created', strtotime('-1 month'), '<')
    ->range(0, 50)
    ->accessCheck(FALSE)
    ->execute();

  $promoted_nodes = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadMultiple($result);

  // Remove promotion.
  foreach ($promoted_nodes as $node) {
    $node->setPromoted(FALSE);
    $node->save();
  }

}

/**
 * Implements hook_helfi_paragraph_types().
 */
function helfi_etusivu_helfi_paragraph_types() : array {
  $entities = [
    'node' => [
      'landing_page' => [
        'field_content' => [
          'current' => 15,
          'front_page_top_news' => 16,
          'front_page_latest_news' => 17,
          'event_list' => 18,
        ],
      ],
      'page' => [
        'field_lower_content' => [
          'front_page_latest_news' => 15,
        ],
      ],
    ],
  ];

  $enabled = [];
  foreach ($entities as $entityTypeId => $bundles) {
    foreach ($bundles as $bundle => $fields) {
      foreach ($fields as $field => $paragraphTypes) {
        foreach ($paragraphTypes as $paragraphType => $weight) {
          $enabled[] = new ParagraphTypeCollection($entityTypeId, $bundle, $field, $paragraphType, $weight);
        }
      }
    }
  }
  return $enabled;
}

/**
 * Implements hook_theme_registry_alter().
 */
function helfi_etusivu_theme_registry_alter(&$theme_registry) : void {
  // Override the Composer debug item template to remove custom version checks.
  $theme_registry['debug_item__composer']['path'] = \Drupal::service('extension.list.module')->getPath('helfi_etusivu') . '/templates';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_etusivu_preprocess_toolbar(&$variables): void {
  $variables['#attached']['library'][] = 'helfi_etusivu/menu-styles';
}

/**
 * Implements hook_block_alter().
 */
function helfi_etusivu_block_alter(&$definitions) : void {
  foreach ($definitions as $id => $definition) {
    if ($id === 'local_tasks_block') {
      $definitions[$id]['class'] = 'Drupal\helfi_etusivu\Plugin\Block\EtusivuLocalTasksBlock';
    }
  }
}

/**
 * Invalidate external caches.
 *
 * This is used to automatically flush caches on all external sites when
 * an 'announcement' node marked as 'publish externally' is created/modified
 * or deleted.
 *
 * @todo Decouple this from node save. Establishing connection to Azure PubSub
 * service seems to take pretty long time
 *
 * @see https://helsinkisolutionoffice.atlassian.net/browse/UHF-8533
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity to flush cache tags for.
 */
function helfi_etusivu_invalidate_external_caches(EntityInterface $entity) : void {
  if (!$entity instanceof ContentEntityInterface) {
    return;
  }
  // Only flush caches when we're saving announcement node with
  // 'field_publish_externally' option checked.
  $isAnnouncementNode = $entity->getEntityTypeId() === 'node' && $entity->bundle() === 'announcement';
  $publishExternally = $entity->hasField('field_publish_externally') && (bool) $entity->get('field_publish_externally')->value === TRUE;

  if (!$isAnnouncementNode || !$publishExternally) {
    return;
  }
  /** @var \Drupal\helfi_api_base\Cache\CacheTagInvalidator $service */
  $service = \Drupal::service('helfi_api_base.cache_tag_invalidator');
  $service->invalidateTags(['helfi_external_entity_announcement']);
}

/**
 * Implements hook_entity_update().
 */
function helfi_etusivu_entity_update(EntityInterface $entity) : void {
  helfi_etusivu_invalidate_external_caches($entity);
}

/**
 * Implements hook_entity_delete().
 */
function helfi_etusivu_entity_delete(EntityInterface $entity) : void {
  helfi_etusivu_invalidate_external_caches($entity);
}

/**
 * Implements hook_entity_insert().
 */
function helfi_etusivu_entity_insert(EntityInterface $entity) : void {
  helfi_etusivu_invalidate_external_caches($entity);
}

/**
 * Implements hook_helfi_hero_design_alter().
 */
function helfi_etusivu_helfi_hero_design_alter(array &$designs): void {
  $designs['with-search'] = t('With search');
}


/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_etusivu_preprocess_page(&$variables): void {
  $route = \Drupal::routeMatch()->getRouteName();
  if (
    $route !== 'view.ordered_news_list.ordered_news' &&
    $route !== 'view.ordered_news_articles_list.ordered_news_articles'
  ) {
    return;
  }

  // Attach styles for the ordered news list and ordered news articles views.
  $variables['#attached']['library'][] = 'helfi_etusivu/views-styles';
}
