<?php

/**
 * @file
 * Contains necessary alterations for the Helfi etusivu instance.
 */

declare(strict_types=1);

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Render\Element;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
use Drupal\helfi_etusivu\HelsinkiNearYou\Enum\RouteInformationEnum;
use Drupal\helfi_api_base\Cache\CacheTagInvalidator;
use Drupal\helfi_etusivu\Entity\Node\Announcement;
use Drupal\helfi_etusivu\Entity\Node\NewsItem;
use Drupal\helfi_etusivu\Entity\Node\PublishExternallyInterface;
use Drupal\helfi_etusivu\Entity\Node\Survey;
use Drupal\helfi_etusivu\Entity\SimpleSitemap\HelfiSimpleSitemap;
use Drupal\helfi_platform_config\DTO\ParagraphTypeCollection;
use Drupal\helfi_platform_config\TextConverter\Document;
use Drupal\node\NodeInterface;
use Drupal\paragraphs\ParagraphInterface;
use Drupal\search_api\Plugin\views\query\SearchApiQuery;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\Plugin\views\query\Sql;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_entity_bundle_info_alter().
 */
function helfi_etusivu_entity_bundle_info_alter(array &$bundles): void {
  if (isset($bundles['node']['news_item'])) {
    $bundles['node']['news_item']['class'] = NewsItem::class;
  }
  if (isset($bundles['node']['announcement'])) {
    $bundles['node']['announcement']['class'] = Announcement::class;
  }
  if (isset($bundles['node']['survey'])) {
    $bundles['node']['survey']['class'] = Survey::class;
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function helfi_etusivu_entity_type_alter(array &$entity_types): void {
  if (isset($entity_types['simple_sitemap'])) {
    $entity_types['simple_sitemap']->setClass(HelfiSimpleSitemap::class);
  }
}

/**
 * Alter promoted to front page label value and position in news content forms.
 *
 * This module alter hook is too early to fully handle the
 * "promote" field alterations, as the entity add/edit form sidebar variables
 * are altered by Gin theme and HDBT Admin theme.
 * See: hdbt_admin/hdbt_admin.theme / hdbt_admin_apply_form_theme().
 */
function _helfi_etusivu_form_promote_field_alter(&$form, FormStateInterface $form_state, $form_id) : void {
  if (
    !isset($form['promote']) ||
    !str_contains($form_id, 'news_item') &&
    !str_contains($form_id, 'news_article')
  ) {
    return;
  }

  // Pass "should_move" variable to form element and update the widget title.
  $form['promote']['#should_move'] = TRUE;
  $form['promote']['widget']['value']['#title'] = t('Publish the news item in the top news flow', [], ['context' => 'News item promoted field title']);
  $form['promote']['widget']['#title'] = t('Top news flow', [], ['context' => 'News item promoted field wrapper title']);
  $form['promote']['widget']['#title_display'] = 'above';

  // Alter the translations for the news articles.
  if (str_contains($form_id, 'news_article')) {
    $form['promote']['widget']['value']['#title'] = t('Publish the news article in the top news articles flow', [], ['context' => 'News article promoted field title']);
    $form['promote']['widget']['#title'] = t('Top news article flow', [], ['context' => 'News article promoted field wrapper title']);
  }
}

/**
 * Alter the node form to hide the updating news field for news items.
 */
function _helfi_etusivu_form_updating_news_field_alter(&$form, FormStateInterface $form_state, $form_id) : void {
  if (!str_contains($form_id, 'news_item')) {
    return;
  }

  if (!isset($form['field_news_item_updating_news'])) {
    return;
  }

  $storage = $form_state->getStorage();

  // Hide the published_at field if the updating news field is set.
  if (!empty($storage['field_storage']) && !empty($storage['field_storage']['#parents']['field_news_item_updating_news'])) {
    $form['published_at']['widget']['#access'] = FALSE;
  }
}

/**
 * Implements hook_ajax_render_alter().
 */
function helfi_etusivu_ajax_render_alter(array &$commands): void {
  // When user clicks on "Add new updating news" button, an ajax callback is
  // triggered. We cannot edit or add another callback to the "add more" button,
  // so we use this hook to set the unpublished date to 11 months from now when
  // a new updating news paragraph is added.
  $request = \Drupal::request();
  $form_id = (string) $request->request->get('form_id', '');

  // Return if the form ID does not contain news item.
  if (empty($form_id) || !str_contains($form_id, 'news_item')) {
    return;
  }

  // Return if the triggering item is not "status" or "add new updating news".
  $triggering_element = (string) $request->request->get('_triggering_element_name');
  if (!in_array($triggering_element, [
    'field_news_item_updating_news_news_update_add_more',
    'status[value]',
  ])) {
    return;
  }

  // Set the unpublished date to 11 months from now when a new updating news
  // paragraph is added.
  if ($triggering_element === 'field_news_item_updating_news_news_update_add_more') {
    $datetime = new DateTime('now');
    $datetime->add(new DateInterval('P11M'));
    $commands[] = (new InvokeCommand('[name="unpublish_on[0][value][date]"]', 'val', [$datetime->format('Y-m-d')]))->render();
    $commands[] = (new InvokeCommand('[name="unpublish_on[0][value][time]"]', 'val', ['01:00:00']))->render();
  }

  // Unset the published on date if user decides to publish the news item.
  if ($triggering_element === 'status[value]') {
    $commands[] = (new InvokeCommand('[name="publish_on[0][value][date]"]', 'val', ['']))->render();
    $commands[] = (new InvokeCommand('[name="publish_on[0][value][time]"]', 'val', ['']))->render();
  }
}

/**
 * AJAX callback to rebuild the unpublish hint and refresh the unpublish widget.
 *
 * @param array $form
 *   Form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 */
function _helfi_etusivu_set_unpublished_date_ajax(array &$form, FormStateInterface $form_state): AjaxResponse {
  // Get the widget name from the request.
  $widget = \Drupal::request()->query->get('widget') ?? '';

  // Process the form to update the values.
  _helfi_etusivu_set_unpublished_date($form, $form_state, $widget);

  $response = new AjaxResponse();
  $renderer = \Drupal::service('renderer');

  // Update the hint container.
  $response->addCommand(new ReplaceCommand(
    '#scheduler-unpublish-hint',
    $renderer->render($form['scheduler_unpublish_hint'])
  ));

  // Rebuild the form to ensure all elements are properly processed.
  $form_state->setRebuild();
  $form = \Drupal::formBuilder()->rebuildForm($form['#form_id'], $form_state, $form);

  // Update the unpublish widget with the newly built form element.
  if (isset($form['unpublish_on']['widget'][0])) {
    $response->addCommand(new ReplaceCommand(
      '#scheduler-' . str_replace('_', '-', 'unpublish_on') . '-widget',
      $renderer->render($form['unpublish_on']['widget'][0])
    ));
  }

  return $response;
}

/**
 * Logic for computing the unpublish date.
 *
 * @param array $form
 *   Form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 * @param string $widget_name
 *   The widget name which triggered the AJAX callback.
 */
function _helfi_etusivu_set_unpublished_date(array &$form, FormStateInterface $form_state, string $widget_name = ''): void {
  $input = $form_state->getUserInput() ?? [];

  // Return if there is no user input or widget name is empty.
  if (empty($input) || empty($widget_name)) {
    return;
  }

  // Create a DateTime object for the current time.
  $datetime = new DateTime('now');

  switch ($widget_name) {
    // Handle status and publish on widgets' logic.
    case 'status_widget':
    case 'publish_on_widget':
      // Return if the news item is already published.
      $form_object = $form_state->getFormObject();
      if ($form_object instanceof EntityFormInterface) {
        $entity = $form_object->getEntity();
        if ($entity instanceof NodeInterface && $entity->isPublished()) {
          return;
        }
      }

      // Return if the news item is not going to be published now or later.
      if (
        empty($input['publish_on'][0]['value']['date']) &&
        empty($input['status']['value'])
      ) {
        return;
      }

      // Indicator if the node is going to be published now.
      $is_published = isset($input['status']) && $input['status']['value'];

      // Indicator if the node is going to be published later.
      $is_publish_on = (
        isset($input['publish_on'][0]['value']) &&
        !empty($input['publish_on'][0]['value']['date'])
      );

      // Do nothing if the node is not going to be published now or later.
      if (!$is_published && !$is_publish_on) {
        return;
      }

      // If the node is going to be published later, use its publish_on date.
      // Otherwise, keep the current date.
      if (!$is_published && $is_publish_on) {
        $datetime = new DateTime("{$input['publish_on'][0]['value']['date']} 01:00:00");
      }

      // Clear the publish_on date values if the user decided to publish
      // the node immediately.
      if ($is_published && $is_publish_on) {
        $user_input = $form_state->getUserInput();
        $user_input['publish_on'] = [0 => ['value' => []]];
        $form_state->setUserInput($user_input);
        $form_state->setValue(['publish_on', 0, 'value'], '');
      }
      break;

    // Handle the updating news widget logic.
    case 'updating_news_widget':
      $widget = &$input['field_news_item_updating_news'];
      $deltas = Element::children($widget);
      $numeric_deltas = array_filter($deltas, 'is_numeric');

      // Get the latest delta and use its date and time values
      // to create a DateTime object.
      if (!empty($numeric_deltas)) {
        $last_delta = max($numeric_deltas);
        if (isset($widget[$last_delta]['subform']['field_news_update_date'][0]['value'])) {
          $date_widget = $widget[$last_delta]['subform']['field_news_update_date'][0]['value'];
          $datetime = new DateTime("{$date_widget['date']} 01:00:00");
        }
      }
      break;

    default:
      return;
  }

  // Add 11 months to the datetime.
  $datetime->add(new DateInterval('P11M'));

  // Add the hint about the unpublish date to the form.
  $form['scheduler_unpublish_hint'] = [
    '#theme' => 'news_item_unpublish_hint',
    '#message' => t('The news item is scheduled to become non-public 11 months after its publication. If necessary, you can change the time in the <strong>Hiding the page</strong> field.'),
  ];

  // Create DrupalDateTime object with proper timezone.
  $unpublish_datetime = DrupalDateTime::createFromDateTime($datetime);

  // Format the date for the form element.
  $formatted_date = $unpublish_datetime->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT);

  // Set the value in form state.
  $form_state->setValue(['unpublish_on', 0, 'value'], $formatted_date);

  // Also set it in the form for display.
  if (isset($form['unpublish_on']['widget'][0]['value'])) {
    // Set the value directly in the form element.
    $form['unpublish_on']['widget'][0]['value']['#default_value'] = [
      'date' => $unpublish_datetime->format('Y-m-d'),
      'time' => '01:00:00',
    ];

    // Also set the value in the form state's user input.
    $user_input = $form_state->getUserInput();
    if (!isset($user_input['unpublish_on'])) {
      $user_input['unpublish_on'] = [0 => ['value' => []]];
    }
    $user_input['unpublish_on'][0]['value']['date'] = $unpublish_datetime->format('Y-m-d');
    $user_input['unpublish_on'][0]['value']['time'] = '01:00:00';
    $form_state->setUserInput($user_input);

    // Force the form to process the input values.
    $form_state->setValue('unpublish_on', [['value' => $formatted_date]]);
  }
}

/**
 * Alter the node form to react on publish status and publish on date changes.
 *
 * This is used to automatically calculate the unpublish date based on
 * the published date. If content producer checks the published status, the
 * unpublish date is set to 11 months from the published date. The same will
 * be done if the "published on" date is set.
 *
 * @param array $form
 *   Form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 * @param string $form_id
 *   Form ID.
 */
function _helfi_etusivu_form_unpublish_date_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  if (!str_contains($form_id, 'news_item')) {
    return;
  }

  // Add a container for displaying the hint of the unpublished date being set.
  $form['scheduler_unpublish_hint'] = [
    '#type' => 'container',
    '#attributes' => ['id' => 'scheduler-unpublish-hint'],
  ];

  // Define which widgets should affect the unpublish date.
  $widgets = [];

  // Status widget.
  if (isset($form['status']['widget']['value'])) {
    $widgets['status_widget'] = &$form['status']['widget']['value'];
  }

  // Published on widget.
  if (isset($form['publish_on']['widget'][0]['value'])) {
    $widgets['publish_on_widget'] = &$form['publish_on']['widget'][0]['value'];
  }

  // Updating news updated date widget.
  if (isset($form['field_news_item_updating_news']['widget'])) {
    $widget = &$form['field_news_item_updating_news']['widget'];
    $deltas = Element::children($widget);
    $numeric_deltas = array_filter($deltas, 'is_numeric');

    // To calculate the unpublished date from "updating news item"'s updated
    // date means that it is needed to add the AJAX callback only to the latest
    // updating_news field's field_news_update_date widget.
    if (!empty($numeric_deltas)) {
      $last_delta = max($numeric_deltas);

      if (isset($widget[$last_delta]['subform']['field_news_update_date']['widget'][0]['value'])) {
        $widgets['updating_news_widget'] = &$widget[$last_delta]['subform']['field_news_update_date']['widget'][0]['value'];
      }
    }
  }

  // Apply AJAX callbacks to the widgets.
  foreach ($widgets as $widget_name => &$widget) {
    $widget['#ajax'] = [
      'callback' => '_helfi_etusivu_set_unpublished_date_ajax',
      'event' => $widget_name === 'status_widget' ? 'change' : 'blur',
      'wrapper' => 'scheduler-unpublish-hint',
      'progress' => ['type' => 'none'],
      'disable-refocus' => TRUE,
      'options' => [
        'query' => [
          'widget' => $widget_name,
        ],
      ],
    ];
  }

  // Add a wrapper for the "unpublish on" date widget,
  // so that it can be updated via AJAX.
  if (isset($form['unpublish_on']['widget'][0]['value'])) {
    $form['unpublish_on']['widget'][0]['value']['#prefix'] = '<div id="scheduler-unpublish-on-widget">';
    $form['unpublish_on']['widget'][0]['value']['#suffix'] = '</div>';
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function helfi_etusivu_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) : void {
  _helfi_etusivu_form_promote_field_alter($form, $form_state, $form_id);
  _helfi_etusivu_form_updating_news_field_alter($form, $form_state, $form_id);
  _helfi_etusivu_form_unpublish_date_alter($form, $form_state, $form_id);
}

/**
 * Implements hook_views_query_alter().
 */
function helfi_etusivu_views_query_alter(ViewExecutable $view, QueryPluginBase $query) : void {
  $draggable_views = [
    'frontpage_news',
    'ordered_news_articles_list',
    'ordered_news_list',
  ];
  if (in_array($view->id(), $draggable_views)) {
    assert($query instanceof Sql);

    $table = $query->getTableInfo('draggableviews_structure');
    if (isset($table['join']->extra)) {
      $langcode = \Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId();
      $table['join']->extra = !$table['join']->extra ? [] : $table['join']->extra;
      $table['join']->extra[] = [
        'field' => 'langcode',
        'value' => $langcode,
        'operator' => '=',
      ];
    }
  }

  if ($view->id() === 'elastic_rss_feed') {
    $query = _helfi_etusivu_handle_rss_params($query);
  }
}

/**
 * Support multiple topics, groups and neighbourhoods in RSS feed.
 *
 * @param \Drupal\search_api\Plugin\views\query\SearchApiQuery $query
 *   The initial query.
 *
 * @return \Drupal\search_api\Plugin\views\query\SearchApiQuery
 *   The resulting query.
 */
function _helfi_etusivu_handle_rss_params(SearchApiQuery $query) : SearchApiQuery {
  $params = Drupal::request()->query->all();

  foreach ([
    'topic' => 'news_tags',
    'groups' => 'news_groups',
    'neighbourhoods' => 'neighbourhoods',
  ] as $param => $indexKey) {
    if (isset($params[$param]) && is_array($params[$param])) {
      $query->addWhere('AND', $indexKey, $params[$param], 'IN');
    }
  };

  return $query;
};

/**
 * Implements hook_helfi_paragraph_types().
 */
function helfi_etusivu_helfi_paragraph_types() : array {
  $entities = [
    'node' => [
      'landing_page' => [
        'field_content' => [
          'current' => 15,
          'front_page_top_news' => 16,
          'front_page_latest_news' => 17,
          'event_list' => 18,
          'news_archive' => 19,
        ],
      ],
      'page' => [
        'field_lower_content' => [
          'front_page_latest_news' => 15,
        ],
      ],
    ],
    'paragraph' => [
      'news_update' => [
        'field_news_update' => [
          'text' => 0,
          'image' => 1,
          'remote_video' => 2,
          'banner' => 3,
        ],
      ],
    ],
  ];

  $enabled = [];
  foreach ($entities as $entityTypeId => $bundles) {
    foreach ($bundles as $bundle => $fields) {
      foreach ($fields as $field => $paragraphTypes) {
        foreach ($paragraphTypes as $paragraphType => $weight) {
          $enabled[] = new ParagraphTypeCollection($entityTypeId, $bundle, $field, $paragraphType, $weight);
        }
      }
    }
  }
  return $enabled;
}

/**
 * Implements hook_theme_registry_alter().
 */
function helfi_etusivu_theme_registry_alter(&$theme_registry) : void {
  // Override the Composer debug item template to remove custom version checks.
  $theme_registry['debug_item__composer']['path'] = \Drupal::service('extension.list.module')->getPath('helfi_etusivu') . '/templates';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_etusivu_preprocess_toolbar(&$variables): void {
  $variables['#attached']['library'][] = 'helfi_etusivu/menu-styles';
}

/**
 * Implements hook_block_alter().
 */
function helfi_etusivu_block_alter(&$definitions) : void {
  foreach ($definitions as $id => $definition) {
    if ($id === 'local_tasks_block') {
      $definitions[$id]['class'] = 'Drupal\helfi_etusivu\Plugin\Block\EtusivuLocalTasksBlock';
    }
  }
}

/**
 * Invalidate external caches.
 *
 * This is used to automatically flush caches on all external sites when
 * an 'announcement' or 'survey' node marked as 'publish externally'
 * is created/modified or deleted.
 *
 * @todo Decouple this from node save. Establishing connection to Azure PubSub
 * service seems to take pretty long time
 *
 * @see https://helsinkisolutionoffice.atlassian.net/browse/UHF-8533
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity to flush cache tags for.
 */
function helfi_etusivu_invalidate_external_caches(EntityInterface $entity) : void {
  if (!$entity instanceof PublishExternallyInterface) {
    return;
  }

  if (!$entity->publishExternally()) {
    return;
  }

  /** @var \Drupal\helfi_api_base\Cache\CacheTagInvalidator $service */
  $service = \Drupal::service(CacheTagInvalidator::class);
  $service->invalidateTags($entity->getExternalCacheTags());
}

/**
 * Implements hook_entity_update().
 */
function helfi_etusivu_entity_update(EntityInterface $entity) : void {
  helfi_etusivu_invalidate_external_caches($entity);
}

/**
 * Implements hook_entity_delete().
 */
function helfi_etusivu_entity_delete(EntityInterface $entity) : void {
  helfi_etusivu_invalidate_external_caches($entity);
}

/**
 * Implements hook_entity_insert().
 */
function helfi_etusivu_entity_insert(EntityInterface $entity) : void {
  helfi_etusivu_invalidate_external_caches($entity);
}

/**
 * Implements hook_helfi_hero_design_alter().
 */
function helfi_etusivu_helfi_hero_design_alter(array &$designs, FieldStorageDefinitionInterface $definition, FieldableEntityInterface|null $entity) : void {
  if ($entity instanceof ParagraphInterface) {
    $designs['with-search'] = t('With search');
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_etusivu_preprocess_html(&$variables): void {
  $route = \Drupal::routeMatch()->getRouteName();

  // Set the theme color to suomenlinna on Helsinki near you landing pages.
  $near_you_pages = [
    'helfi_etusivu.helsinki_near_you',
    'helfi_etusivu.helsinki_near_you_events',
    'helfi_etusivu.helsinki_near_you_results',
    'helfi_etusivu.helsinki_near_you_roadworks',
    'helfi_etusivu.helsinki_near_you_feedbacks',
  ];

  if (in_array($route, $near_you_pages)) {
    $variables['theme_color'] = 'suomenlinna';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_etusivu_preprocess_page(&$variables): void {
  $route = \Drupal::routeMatch()->getRouteName();

  $near_you_pages = [
    'helfi_etusivu.helsinki_near_you',
    'helfi_etusivu.helsinki_near_you_events',
    'helfi_etusivu.helsinki_near_you_roadworks',
    'helfi_etusivu.helsinki_near_you_feedbacks',
  ];

  // There is hero block on Helsinki near you landing page but
  // since it isn't a paragraph we must set this variable manually.
  if (in_array($route, $near_you_pages)) {
    $variables['has_hero'] = TRUE;
  }

  $ordered_news_list = [
    'view.ordered_news_list.ordered_news',
    'view.ordered_news_articles_list.ordered_news_articles',
  ];

  if (!in_array($route, $ordered_news_list)) {
    return;
  }

  // Attach styles for the ordered news list and ordered news articles views.
  $variables['#attached']['library'][] = 'helfi_etusivu/views-styles';
}

/**
 * Implements hook_ENTITY_TYPE_text_conversion_alter().
 */
function helfi_etusivu_node_text_conversion_alter(Document &$document, EntityInterface $entity) : void {
  assert($entity instanceof NodeInterface);

  if (in_array($entity->bundle(), ['news_item', 'news_article'])) {
    $document
      ->stripNodes("//*[contains(@class, 'content-date')]");
  }
}

/**
 * Implements hook_first_paragraph_grey_alter().
 */
function helfi_etusivu_first_paragraph_grey_alter(array &$paragraphs): void {
  $paragraphs[] = 'news_archive';
}

/**
 * Implements hook_preprocess().
 */
function helfi_etusivu_preprocess_node__news_item__full(array &$variables): void {
  $node = $variables['node'];
  assert($node instanceof NewsItem);
  $updating_news_publish_date = $node->getFirstUpdatingNewsPublishDate();

  // Change the published_at variable only if
  // there is updating news on the news item.
  if (!is_null($updating_news_publish_date)) {
    $variables['published_at'] = $updating_news_publish_date;
  }
}

/**
 * Implements hook_theme().
 */
function helfi_etusivu_theme() : array {
  return [
    'helsinki_near_you_landing_page' => [
      'variables' => [
        'title' => NULL,
        'description' => NULL,
        'illustration' => NULL,
        'illustration_url_1x' => NULL,
        'illustration_url_2x' => NULL,
        'illustration_caption' => NULL,
      ],
      'template' => 'helsinki-near-you-landing-page',
    ],
    'helsinki_near_you_roadwork_section' => [
      'variables' => [
        'title' => NULL,
        'projects' => [],
      ],
      'template' => 'helsinki-near-you-roadwork-section',
    ],
    'helsinki_near_you_roadworks' => [
      'variables' => [
        'title' => NULL,
        'roadworks_data' => NULL,
        'address' => NULL,
      ],
      'template' => 'helsinki-near-you-roadworks',
    ],
    'helsinki_near_you_roadwork_item' => [
      'variables' => [
        'title' => NULL,
        'uri' => NULL,
        'work_type' => NULL,
        'address' => NULL,
        'schedule' => NULL,
        'distance_label' => NULL,
        'roadwork_attributes' => [],
      ],
      'template' => 'helsinki-near-you-roadwork-item',
    ],
    'helsinki_near_you_results_page' => [
      'variables' => [
        'back_link_label' => NULL,
        'back_link_url' => NULL,
        'coordinates' => NULL,
        'title' => NULL,
        'service_groups' => NULL,
        'nearby_neighbourhoods' => NULL,
        'news_archive_url' => NULL,
        'roadwork_section' => NULL,
        'roadwork_archive_url' => NULL,
        'feedback_section' => NULL,
        'feedback_archive_url' => NULL,
        'events_section' => NULL,
        'events_archive_url' => NULL,
      ],
      'template' => 'helsinki-near-you-results-page',
    ],
    'helsinki_near_you_event_item' => [
      'variables' => [
        'title' => NULL,
        'object' => NULL,
        'external_image' => NULL,
      ],
      'template' => 'helsinki-near-you-event-item',
    ],
    'helsinki_near_you_feedback_item' => [
      'variables' => [
        'status' => NULL,
        'description' => NULL,
        'uri' => NULL,
        'title' => NULL,
        'address' => NULL,
        'distance_label' => NULL,
        'requested_datetime' => NULL,
        'feedback_attributes' => [],
      ],
      'template' => 'helsinki-near-you-feedback-item',
    ],
    'helsinki_near_you_events' => [
      'variables' => [],
      'template' => 'helsinki-near-you-events',
    ],
    'helsinki_near_you_hero_block' => [
      'variables' => [
        'hero_title' => NULL,
        'hero_description' => NULL,
        'first_paragraph_bg' => NULL,
        'form' => [],
      ],
      'template' => 'helsinki-near-you-hero-block',
    ],
    'helsinki_near_you_search_page' => [
      'variables' => [
        'autosuggest_form' => NULL,
        'content' => NULL,
        'content_attributes' => ['classes' => []],
        'component_title' => NULL,
        'component_description' => NULL,
        'address_missing_message' => NULL,
        'address_error_message' => NULL,
      ],
    ],
    'helsinki_near_you_lazy_builder_content' => [
      'variables' => [
        'title' => NULL,
        'content' => NULL,
      ],
    ],
    'helsinki_near_you_lazy_builder_preview' => [
      'variables' => [
        'num_items' => NULL,
        'preview_attributes' => NULL,
      ],
    ],
    'news_item_unpublish_hint' => [
      'variables' => [
        'message' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_metatags_alter().
 *
 * UHF-11151 For updating news items, set the published time
 * same as the changed time for better google search results.
 */
function helfi_etusivu_metatags_alter(array &$metatags, array &$context): void {
  $entity = $context['entity'];
  if (!$entity instanceof NewsItem) {
    return;
  }

  if (!$entity->get('field_news_item_updating_news')->isEmpty()) {
    $metatags['article_published_time'] = '[updating-news:changed:html_datetime]';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_etusivu_preprocess_node__news_item(array &$variables): void {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];

  if ($node instanceof NewsItem) {
    $variables['#attached']['drupalSettings']['news_taxonomy_term_ids'] = $node->getNewsTerms();
  }
}

/**
 * Implements hook_page_attachments_HOOK().
 */
function helfi_etusivu_page_attachments(array &$page) {
  // Check if the current route matches the desired route.
  $route = \Drupal::routeMatch()->getRouteName();
  $routeInformation = RouteInformationEnum::fromRoute($route);

  if ($routeInformation) {
    $description = [
      '#tag' => 'meta',
      '#attributes' => [
        'name' => 'description',
        'content' => $routeInformation->getDescription(),
      ],
    ];
    $page['#attached']['html_head'][] = [$description, 'description'];
  }
}

/**
 * Implements hook_module_implements_alter().
 *
 * Prevent radioactivity from running on every cron run.
 * Previously, ultimate cron -contrib module was used to run radioactivity
 * once per 3 hours since it caused performance issues when the cron invalidated
 * the list view caches constantly. The functionality is now run by custom cron.
 */
function helfi_etusivu_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'cron' && isset($implementations['radioactivity'])) {
    unset($implementations['radioactivity']);
  }
}
