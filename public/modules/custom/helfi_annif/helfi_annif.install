<?php

/**
 * @file
 * Contains annif installation hooks.
 */

declare(strict_types=1);

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Create entity definitions for annif-fields.
 */
function helfi_annif_update_9000(): void {
  $entity_field_manager = \Drupal::service('entity_field.manager');
  $type_fields = $entity_field_manager->getFieldDefinitions('node', 'news_item');
  $entity_definition_update_manager = Drupal::entityDefinitionUpdateManager();

  foreach (['show_annif_block', 'in_recommendations', 'annif_keywords'] as $field_name) {
    if ($entity_definition_update_manager->getFieldStorageDefinition($field_name, 'node')) {
      continue;
    }

    $entity_definition_update_manager->installFieldStorageDefinition(
      $field_name,
      'node',
      'helfi_annif',
      $type_fields[$field_name]
    );
  }
}

/**
 * Create entity definitions for news_article annif-fields.
 */
function helfi_annif_update_9001(): void {
  $entity_field_manager = \Drupal::service('entity_field.manager');
  $type_fields = $entity_field_manager->getFieldDefinitions('node', 'news_article');
  $entity_definition_update_manager = Drupal::entityDefinitionUpdateManager();

  foreach (['show_annif_block', 'in_recommendations', 'annif_keywords'] as $field_name) {
    if ($entity_definition_update_manager->getFieldStorageDefinition($field_name, 'node')) {
      continue;
    }

    $entity_definition_update_manager->installFieldStorageDefinition(
      $field_name,
      'node',
      'helfi_annif',
      $type_fields[$field_name]
    );
  }
}

/**
 * Creates the database table for the HelfiRecommendations entity.
 */
function helfi_annif_update_9002(): void {
  $definition = \Drupal::entityTypeManager()->getDefinition('suggested_topics');

  \Drupal::entityDefinitionUpdateManager()
    ->installEntityType($definition);
}

/**
 * Updates field storage definition for etusivu news entities.
 */
function helfi_annif_update_9003(): void {
  $updates = [
    'annif_suggested_topics' => [
      'node' => [
        'news_article',
        'news_item',
      ],
    ],
  ];

  $entity_field_manager = \Drupal::service('entity_field.manager');
  $update_manager = \Drupal::entityDefinitionUpdateManager();

  foreach ($updates as $field => $entity_types) {
    foreach ($entity_types as $entity_type_id => $bundles) {
      foreach ($bundles as $bundle) {
        $field_definitions = $entity_field_manager->getFieldDefinitions($entity_type_id, $bundle);

        $update_manager->installFieldStorageDefinition(
          $field,
          $entity_type_id,
          'helfi_annif',
          $field_definitions[$field],
        );
      }
    }
  }

  \Drupal::messenger()->addMessage('Run drush helfi:annif-fix-references');

  // @todo remove obsolete field annif_keywords in a future update hook.
}

/**
 * Updates entity fields for suggested_topics.
 */
function helfi_annif_update_9004(): void {
  $fields['parent_id'] = BaseFieldDefinition::create('string')
    ->setLabel(t('Parent ID'))
    ->setDescription(t('The ID of the parent entity of which this entity is referenced.'))
    ->setSetting('is_ascii', TRUE);

  $fields['parent_type'] = BaseFieldDefinition::create('string')
    ->setLabel(t('Parent type'))
    ->setDescription(t('The entity parent type to which this entity is referenced.'))
    ->setSetting('is_ascii', TRUE)
    ->setSetting('max_length', EntityTypeInterface::ID_MAX_LENGTH);

  $fields['parent_instance'] = BaseFieldDefinition::create('string')
    ->setLabel(t('Parent instance'))
    ->setDescription(t('The name of the instance where this entity is located at.'))
    ->setSetting('is_ascii', TRUE);

  foreach ($fields as $name => $field) {
    \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition($name, 'suggested_topics', 'helfi_annif', $field);
  }
}
