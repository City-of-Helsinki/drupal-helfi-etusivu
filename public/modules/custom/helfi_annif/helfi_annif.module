<?php

/**
 * @file
 * Contains alterations for config.
 */

declare(strict_types=1);

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\entity\BundleFieldDefinition;
use Drupal\helfi_annif\KeywordManager;
use Drupal\helfi_annif\RecommendableInterface;
use Drupal\helfi_annif\TextConverter\Document;

/**
 * Implements hook_theme().
 */
function helfi_annif_theme() : array {
  return [
    'recommendations_block' => [
      'variables' => [
        'rows' => NULL,
        'no_results_message' => NULL,
      ],
      'template' => 'recommendations-block',
    ],
  ];
}

/**
 * Implements hook_themes_installed().
 */
function helfi_annif_themes_installed($theme_list) {
  /** @var Drupal\helfi_platform_config\Helper\BlockInstaller $block_installer */
  $block_installer = Drupal::service('helfi_platform_config.helper.block_installer');

  foreach ($theme_list as $theme) {
    if (in_array($theme, ['stark', 'hdbt', 'hdbt_subtheme'])) {
      // Set the current theme as default theme.
      Drupal::configFactory()->getEditable('system.theme')
        ->set('default', $theme)
        ->save();

      foreach (helfi_annif_get_block_configurations($theme) as $block_config) {
        ['block' => $block, 'variations' => $variations] = $block_config;
        $block_installer->install($block, $variations);
      }
    }
  }
}

/**
 * Gets the block configurations.
 *
 * Example block:
 *
 * @code
 * [
 *   'breadbrumbs' => [
 *     'block' => [
 *       ...
 *     ],
 *     'variations' => [
 *       ...
 *     ],
 *   ],
 * ];
 * @endcode
 *
 * @return array[]
 *   The block configurations.
 */
function helfi_annif_get_block_configurations(string $theme) {
  return [
    'hdbt_subtheme_hdbt_subtheme_aipoweredrecommendations' => [
      'block' => [
        'id' => 'hdbt_subtheme_hdbt_subtheme_aipoweredrecommendations',
        'plugin' => 'helfi_recommendations',
        'provider' => 'helfi_annif',
        'settings' => [
          'id' => 'helfi_recommendations',
          'label' => 'AI powered recommendations',
          'label_display' => 'visible',
          'provider' => 'helfi_annif',
        ],
        'visibility' => [
          'language' => [
            'id' => 'language',
            'negate' => 'false',
            'context_mapping' => [
              'language' => '@language.current_language_context:language_interface',
            ],
            'langcodes' => [
              'fi' => 'fi',
              'sv' => 'sv',
              'en' => 'en',
            ],
          ],
          'entity_bundle:node' => [
            'id' => 'entity_bundle:node',
            'negate' => FALSE,
            'context_mapping' => [
              'node' => '@node.node_route_context:node',
            ],
            'bundles' => [
              'news_item' => 'news_item',
              'news_article' => 'news_article',
            ],
          ],
        ],
      ],
      'variations' => [
        [
          'theme' => $theme,
          'region' => 'after_content',
        ],
        [
          'theme' => 'stark',
          'region' => 'content',
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_entity_insert().
 */
function helfi_annif_entity_insert(EntityInterface $entity) : void {
  if ($entity instanceof RecommendableInterface) {
    /** @var \Drupal\helfi_annif\KeywordManager $keywordManager */
    $keywordManager = \Drupal::service(KeywordManager::class);
    $keywordManager->queueEntity($entity, TRUE);
  }
}

/**
 * Implements hook_entity_update().
 */
function helfi_annif_entity_update(EntityInterface $entity) : void {
  if ($entity instanceof RecommendableInterface) {
    /** @var \Drupal\helfi_annif\KeywordManager $keywordManager */
    $keywordManager = \Drupal::service(KeywordManager::class);
    $keywordManager->queueEntity($entity, TRUE);
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function helfi_annif_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entityType, $bundle) : void {
  if ($entityType->id() === 'taxonomy_term' && $bundle === 'annif_keywords') {
    if (isset($fields['field_uri'])) {
      $fields['field_uri']->addConstraint('UniqueField');
    }
  }

  $recommendable_node_bundles = ['news_item', 'news_article'];
  if ($entityType->id() == 'node' && in_array($bundle, $recommendable_node_bundles)) {
    foreach (helfi_annif_bundle_fields($entityType->id(), $bundle) as $name => $field) {
      $fields[$name] = $field;
    }
  }
}

/**
 * Implements hook_entity_field_storage_info().
 */
function helfi_annif_entity_field_storage_info(EntityTypeInterface $entity_type): array {
  if ($entity_type->id() === 'node') {
    return array_merge(helfi_annif_bundle_fields($entity_type->id(), 'news_item'), helfi_annif_bundle_fields($entity_type->id(), 'news_article'));
  }
  return [];
}

/**
 * Get annif bundle fields.
 *
 * @param string $entity_type_id
 *   The entity type id.
 * @param string $bundle
 *   The bundle.
 *
 * @return array
 *   Array of bundleFieldDefinitions.
 */
function helfi_annif_bundle_fields(string $entity_type_id, string $bundle): array {
  $visibilityFields = [
    'in_recommendations' => new TranslatableMarkup('Show in recommendations', [], ['context' => 'annif']),
    'show_annif_block' => new TranslatableMarkup('Show recommendations block', [], ['context' => 'annif']),
  ];

  $fields = [];
  foreach ($visibilityFields as $id => $name) {
    $fields[$id] = BundleFieldDefinition::create('boolean')
      ->setName($id)
      ->setLabel($name)
      ->setTargetEntityTypeId($entity_type_id)
      ->setTargetBundle($bundle)
      ->setCardinality(1)
      ->setDefaultValue(1)
      ->setSettings(['default_value' => TRUE])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE);
  }

  $keywordfieldId = 'annif_keywords';
  $keywordfieldName = new TranslatableMarkup('Automatically selected news categories', [], ['context' => 'annif']);

  $fields[$keywordfieldId] = BundleFieldDefinition::create('entity_reference')
    ->setName($keywordfieldId)
    ->setLabel($keywordfieldName)
    ->setSettings(['target_type' => 'taxonomy_term'])
    ->setTargetEntityTypeId($entity_type_id)
    ->setTargetBundle($bundle)
    ->setDisplayOptions('form',
      [
        'type' => 'readonly_field_widget',
        'third_party_settings' => [],
        'settings' =>
          [
            'formatter_type' => 'entity_reference_label',
          ],
      ]
    )
    ->setReadonly(TRUE)
    ->setTranslatable(FALSE)
    ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  return $fields;
}

/**
 * Implements hook_text_conversion_alter().
 */
function helfi_annif_text_conversion_alter(Document &$document, EntityInterface $entity) : void {
  // Strip nodes that are not displayed.
  $document
    ->stripNodes("//*[contains(@class, 'is-hidden')]")
    ->stripNodes("//*[contains(@class, 'visually-hidden')]");
}
