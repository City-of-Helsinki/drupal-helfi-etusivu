<?php

/**
 * @file
 * Contains alterations for config.
 */

declare(strict_types=1);

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\helfi_annif\KeywordManager;
use Drupal\helfi_annif\RecommendableInterface;
use Drupal\helfi_annif\TextConverter\Document;

/**
 * Implements hook_theme().
 */
function helfi_annif_theme() : array {
  return [
    'recommendations_block' => [
      'variables' => [
        'rows' => NULL,
      ],
      'template' => 'recommendations-block',
    ],
  ];
}

/**
 * Implements hook_entity_insert().
 */
function helfi_annif_entity_insert(EntityInterface $entity) : void {
  /** @var \Drupal\helfi_annif\KeywordManager $keywordManager */
  if ($entity instanceof RecommendableInterface) {
    $keywordManager = \Drupal::service(KeywordManager::class);
    $keywordManager->queueEntity($entity, TRUE);
  }
}

/**
 * Implements hook_entity_update().
 */
function helfi_annif_entity_update(EntityInterface $entity) : void {
  /** @var \Drupal\helfi_annif\KeywordManager $keywordManager */
  if ($entity instanceof RecommendableInterface) {
    $keywordManager = \Drupal::service(KeywordManager::class);
    $keywordManager->queueEntity($entity, TRUE);
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function helfi_annif_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entityType, $bundle) : void {
  if ($entityType->id() === 'taxonomy_term' && $bundle === 'annif_keywords') {
    if (isset($fields['field_uri'])) {
      $fields['field_uri']->addConstraint('UniqueField');
    }
  }
}

/**
 * Implements hook_text_conversion_alter().
 */
function helfi_annif_text_conversion_alter(Document &$document, EntityInterface $entity) : void {
  // Strip nodes that are not displayed.
  $document
    ->stripNodes("//*[contains(@class, 'is-hidden')]")
    ->stripNodes("//*[contains(@class, 'visually-hidden')]");
}
