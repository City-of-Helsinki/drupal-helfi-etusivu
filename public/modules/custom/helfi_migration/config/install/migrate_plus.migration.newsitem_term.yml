# The machine name for a migration, used to uniquely identify it.
id: newsitem_term

# A human-friendly description of the migration.
label: Migrate news item categories from the source to taxonomy terms.

# The machine name of the group containing this migration (which contains shared
# configuration to be merged with our own configuration here).
migration_group: newsitem

# The category or tag for the migration.
migration_tags:
  - helfi

# Every migration must have a source plugin, which controls the delivery of our
# source data. In this case, our source plugin has the name "newsitem_term", which
# Drupal resolves to the PHP class defined in
# src/Plugin/migrate/source/NewsitemTerm.php.
source:
  plugin: url
  data_fetcher_plugin: http
  data_parser_plugin: xml
  urls: https://helfirest-hki-kanslia-aok-drupal-nodered.agw.arodevtest.hel.fi/helfirest/Category
  item_selector: /atom:feed/atom:entry

  # Under 'fields', we list the data items to be imported. The first level keys
  # are the source field names we want to populate (the names to be used as
  # sources in the process configuration below). For each field we're importing,
  # we provide a label (optional - this is for display in migration tools) and
  # an xpath for retrieving that value. It's important to note that this xpath
  # is relative to the elements retrieved by item_xpath.
  fields:
    -
      name: field_atomid
      label: 'Unique external ID'
      selector: atom:id
    -
      name: name
      label: 'Term name'
      selector: wcm:name
    -
      name: description
      label: 'Term description'
      selector: atom:title
  # Under 'ids', we identify source fields populated above which will uniquely
  # identify each imported item. The 'type' makes sure the migration map table
  # uses the proper schema type for stored the IDs.
  ids:
    field_atomid:
      type: string

# Here's the meat of the migration - the processing pipeline. This describes how
# each destination field is to be populated based on the source data. For each
# destination field, one or more process plugins may be invoked.
process:
  # Here is a new plugin - default_value. In its simplest usage here, it is used
  # to hard-code a destination value, the vid (vocabulary ID) our taxonomy terms
  # should be assigned to. It's important to note that while above the right
  # side of the mappings was a source field name, here the right side of the
  # 'default_value:' line is an actual value.
  vid:
    plugin: default_value
    default_value: news_tags
  name: name
  description: description
  field_atomid: field_atomid

# Every migration must also have a destination plugin, which handles writing
# the migrated data in the appropriate form for that particular kind of data.
# Most Drupal content is an "entity" of one type or another, and we need to
# specify what entity type we are populating (in this case, taxonomy terms).
# Unlike the source plugin (which is specific to our particular scenario), this
# destination plugin is implemented in Drupal itself.
destination:
  plugin: entity:taxonomy_term

# By default, configuration entities (like this migration) are not automatically
# removed when the migration which installed them is uninstalled. To have your
# migrations uninstalled with your migration module, add an enforced dependency
# on your module.
dependencies:
  enforced:
    module:
      - helfi_migration
