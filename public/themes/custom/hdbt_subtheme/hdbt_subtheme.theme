<?php

/**
 * @file
 * Functions to support theming in the HDBT Subtheme.
 */

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_subtheme_preprocess_block(&$variables) {
  if (isset($variables['elements']['#id'])) {
    $variables['content']['#attributes']['block_id'] = $variables['elements']['#id'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter for blocks.
 */
function hdbt_subtheme_theme_suggestions_block_alter(&$suggestions) {
  // Load theme suggestions for blocks from parent theme.
  foreach ($suggestions as &$suggestion) {
    $suggestion = str_replace('hdbt_subtheme_', '', $suggestion);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Provide block based menu suggestions.
 */
function hdbt_subtheme_theme_suggestions_menu_alter(&$suggestions, $variables) {
  if (isset($variables['attributes']['block_id'])) {
    $block_id = str_replace('hdbt_subtheme_', '', $variables['attributes']['block_id']);

    switch ($block_id) {
      case 'mobile_navigation':
        $suggestions[] = 'menu__mobile';
        break;

      case 'mainnavigation':
        $suggestions[] = 'menu__main__desktop';
        break;

      case 'main_navigation_level_2':
        $suggestions[] = 'menu__main__sidebar';
        break;

      case 'brandingnavigation':
        $suggestions[] = 'menu__main__branding';
        break;

      default:
        $suggestions[] = 'menu__' . $variables['attributes']['block_id'];
        break;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_subtheme_preprocess_field(&$variables) {
  // Add needed attributes to links.
  if ($variables['field_name'] === 'field_current_links') {
    foreach ($variables['items'] as &$item) {
      $existing = $item['content']['#url']->getOption('attributes');
      $attributes = array_merge($existing ?? [], [
        'class' => [
          'link__style--highlight',
        ],
      ]);

      $item['content']['#url']->setOption('attributes', $attributes);
    }
  }
}

/**
 * Implements template_preprocess_paragraph().
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - paragraph: The paragraph object.
 *   - view_mode: View mode; e.g., 'full', 'teaser'...
 */
function hdbt_subtheme_preprocess_paragraph(array &$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $paragraph_type = $paragraph->getType();
  $path = '/themes/custom/hdbt_subtheme/src/images/';

  if ($paragraph_type == 'current') {
    $illustration = match($paragraph->get('field_seasons')->value) {
      'spring' => $path . 'spring.svg',
      'summer' => $path . 'summer.svg',
      'autumn' => $path . 'autumn.svg',
      'winter' => $path . 'winter.svg'
    };

    if ($illustration) {
      $variables['seasonal_illustration'] = $illustration;
    }
  }
}
