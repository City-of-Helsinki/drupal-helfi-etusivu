<?php

/**
 * @file
 * Functions to support theming in the HDBT Subtheme.
 */

declare(strict_types = 1);

use Drupal\Core\Url;

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_subtheme_preprocess_menu(&$variables) {
  // Apply language attributes to following menus.
  foreach ($variables['items'] as &$item) {
    _hdbt_menu_item_apply_attributes($item, in_array(
      $variables['menu_name'],
      [
        'footer-bottom-navigation',
        'footer-top-navigation',
        'footer-top-navigation-2',
        'header-top-navigation',
        'header-language-links',
      ]
    ));
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_subtheme_preprocess_block(&$variables) {
  if (isset($variables['elements']['#id'])) {
    $variables['content']['#attributes']['block_id'] = $variables['elements']['#id'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_subtheme_theme_suggestions_block_alter(&$suggestions) {
  // Load theme suggestions for blocks from parent theme.
  foreach ($suggestions as &$suggestion) {
    $suggestion = str_replace('hdbt_subtheme_', '', $suggestion);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_subtheme_theme_suggestions_menu_alter(&$suggestions, $variables) {
  if (isset($variables['attributes']['block_id'])) {
    $block_id = str_replace('hdbt_subtheme_', '', $variables['attributes']['block_id']);

    $suggestions[] = match ($block_id) {
      'mobile_navigation' => 'menu__mobile',
      'mainnavigation' => 'menu__main__desktop',
      'main_navigation_level_2' => 'menu__main__sidebar',
      'brandingnavigation' => 'menu__main__branding',
      default => 'menu__' . $variables['attributes']['block_id'],
    };
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_subtheme_preprocess_field(&$variables) {
  // Add needed attributes to links.
  if ($variables['field_name'] === 'field_current_links') {
    foreach ($variables['items'] as &$item) {
      $existing = $item['content']['#url']->getOption('attributes');
      $attributes = array_merge($existing ?? [], [
        'class' => [
          'link__style--highlight',
        ],
      ]);

      $item['content']['#url']->setOption('attributes', $attributes);
    }
  }
}

/**
 * Implements template_preprocess_paragraph().
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - paragraph: The paragraph object.
 *   - view_mode: View mode; e.g., 'full', 'teaser'...
 */
function hdbt_subtheme_preprocess_paragraph(array &$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  $paragraph_type = $paragraph->getType();

  /** @var \Drupal\Core\File\FileUrlGeneratorInterface $service */
  $service = \Drupal::service('file_url_generator');
  $theme = \Drupal::service('theme_handler')->getTheme('hdbt_subtheme');

  // Add theme path to as variable.
  $path = $service->generate("{$theme->getPath()}/src/images/")
    ->toString(TRUE)->getGeneratedUrl();

  if ($paragraph_type == 'current') {
    $illustration = match($paragraph->get('field_seasons')->value) {
      'spring' => [
        'url' => $path . 'spring.svg',
        'photographer' => 'Lille Santanen',
      ],
      'summer' => [
        'url' => $path . 'summer.svg',
        'photographer' => 'Lille Santanen',
      ],
      'autumn' => [
        'url' => $path . 'autumn.svg',
        'photographer' => 'Lille Santanen',
      ],
      'winter' => [
        'url' => $path . 'winter.svg',
        'photographer' => 'Lille Santanen',
      ],
    };

    if ($illustration) {
      $variables['seasonal_illustration'] = $illustration;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_subtheme_preprocess_page__news(array &$variables) {
  $config = \Drupal::config('elastic_proxy.settings');
  if ($config->get('elastic_proxy_url')) {
    $variables['#attached']['drupalSettings']['helfi_news_archive']['elastic_proxy_url'] = $config->get('elastic_proxy_url');
  }

  $feed_base_url = Url::fromRoute('view.news_archive.feed_1')->toString();

  if ($feed_base_url) {
    $feed_link = [
      '#type' => 'html_tag',
      '#tag' => 'link',
      '#attributes' => [
        'rel' => 'alternative',
        'type' => 'application/rss+xml',
        'href' => $feed_base_url,
        'id' => 'news-feed-url',
      ],
    ];

    $variables['#attached']['html_head'][] = [$feed_link, 'feed_link'];
    $variables['#attached']['drupalSettings']['helfi_news_archive']['feed_base_url'] = $feed_base_url;
  }

}

/**
 * Implements hook_preprocess_views_view_row_rss().
 */
function hdbt_subtheme_preprocess_views_view_row_rss(&$variables) {
  // Get all necessary data to create the enclosure tag with proper attributes.
  $enclosure_attributes = NULL;
  $node = NULL;

  foreach ($variables['item_elements'] as $key => $element) {
    if ($element['key'] == 'enclosure') {
      $enclosure_attributes = $variables['item_elements'][$key]['attributes'];
    }
    if ($element['key'] == 'guid') {
      $guid = (string) $variables['item_elements'][$key]['value'];
      $node = \Drupal::service('entity.repository')->loadEntityByUuid('node', $guid);
    }
  }

  if (!$node || !$enclosure_attributes) {
    return;
  }

  // Add attributes to enclosure tag.
  if (
    $node->hasField('field_main_image') &&
    !$node->get('field_main_image')->isEmpty()
  ) {
    $image = $node->field_main_image->entity->field_media_image->first();
    $file = $node->field_main_image->entity->field_media_image->entity;

    $values = [
      'url' => $enclosure_attributes['url'],
      'type' => $file ? $file->getMimeType() : '',
      'size' => $file ? $file->getSize() : '',
      'alt' => $image ? $image->alt : ' ',
    ];

    foreach ($values as $name => $value) {
      $enclosure_attributes->offsetSet($name, $value);
    }
  }
}
